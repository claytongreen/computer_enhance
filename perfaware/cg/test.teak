str file #option;

void Start() {
  SystemShellExecute("cls");

  assert SystemShellExecute("build");

  str exe = "build\\disasm.exe";
  // check exe exists
  assert PathExists(exe);

  if file != "" {
    assert PathExists(file) == true;

    Test(exe, ".", file);
  } else {
    RunDefaultTests(exe);
  }
}

void RunDefaultTests(str exe) {
  str test_dir = "..\\part1";
  assert PathExists(test_dir);

  Log("");

  for str file in DirectoryEnumerate(test_dir):assert() {
    if StringContains(file, ".asm") { continue; }

    Log("%file%...");

    bool result = Test(exe, test_dir, file);
    if result == false { break; }

    Log("");
  }

  if PathExists("build\\out.asm") { PathDelete("build\\out.asm"); }
  if PathExists("build\\out_asm") { PathDelete("build\\out_asm"); }
}

bool Test(str exe, str path, str file) {
  if !SystemShellExecute("%exe% %path%\\%file% > build\\out.asm") {
    SystemShellExecute("%exe% %path%\\%file% 1");

    return false;
  }
  if !SystemShellExecute("nasm -o build\\out_asm build\\out.asm") {
		if PathExists("out.asm") {
    	SystemShellExecute("type out.asm");
		} else {
			SystemShellExecute("%exe% %path%\\%file% 1");
		}

    return false;
  }
  if !SystemShellExecute("fc /B %path%\\%file% build\\out_asm") {
    str orig = FileReadAll("%path%\\%file%.asm"):assert();
    str disa = FileReadAll("build\\out.asm"):assert();

    str[] orig_lines = new str[];
    str[] disa_lines = new str[];

    int length = file:len();

    for str line in StringSplitByCharacter(orig, "\n", false) {
      str trimmed = StringTrim(line);
      if StringStartsWith(trimmed, ";") { continue; }
      if trimmed:len() == 0 { continue; }

      length = length if trimmed:len() < length else trimmed:len();

      orig_lines:add(trimmed);
    }
    for str line in StringSplitByCharacter(disa, "\n", false) {
      str trimmed = StringTrim(line);
      if StringStartsWith(trimmed, ";") { continue; }
      if trimmed:len() == 0 { continue; }

      disa_lines:add(trimmed);
    }

    Log("%file%   out");

    int lines = orig_lines:len() if orig_lines:len() > disa_lines:len() else disa_lines:len();
    for int i = 0; i < lines; i += 1 {
      str left  = orig_lines[i] if i < orig_lines:len() else "---";
      str right = disa_lines[i] if i < disa_lines:len() else "---";

      str left_pad = StringRepeat(" ", length - left:len());

      str message = "%left%%left_pad%   %right%";
      str modifier = TextColorError() + TextBold() if left != right else TextWeight(100);
      if (left != right) {
	Log(modifier + message);
      }
    }

    return false;
  }

  return true;
}
