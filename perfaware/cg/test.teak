str file #option;

void Start() {
  SystemShellExecute("cls");

  assert SystemShellExecute("build");

  str exe = "build\\disasm.exe";
  // check exe exists
  assert PathExists(exe);

  if file != "" {
    assert PathExists(file) == true;
    TestDecode(exe, ".", file);
  } else {
    RunDefaultTests(exe);
  }
}

void RunDefaultTests(str exe) {
  str test_dir = "..\\part1";
  assert PathExists(test_dir);

  Log("");

  // decoding
  // if (!TestDecode(exe, test_dir, "listing_0037_single_register_mov")) { return; }
  // if (!TestDecode(exe, test_dir, "listing_0038_many_register_mov")) { return; }
  // if (!TestDecode(exe, test_dir, "listing_0039_more_movs")) { return; }
  // if (!TestDecode(exe, test_dir, "listing_0040_challenge_movs")) { return; }
  // if (!TestDecode(exe, test_dir, "listing_0041_add_sub_cmp_jnz")) { return; }
  // if (!TestDecode(exe, test_dir, "listing_0042_completionist_decode")) { return; }

  // simulation
  // if (!TestDecode(exe, test_dir, "listing_0043_immediate_movs")) { return; }
  // if (!TestExec(exe, test_dir, "listing_0043_immediate_movs", "")) { return; }
  // if (!TestDecode(exe, test_dir, "listing_0044_register_movs")) { return; }
  // if (!TestExec(exe, test_dir, "listing_0044_register_movs", "")) { return; }
  // if (!TestDecode(exe, test_dir, "listing_0045_challenge_register_movs")) { return; }
  // if (!TestExec(exe, test_dir, "listing_0045_challenge_register_movs", "")) { return; }
  // if (!TestDecode(exe, test_dir, "listing_0046_add_sub_cmp")) { return; }
  // if (!TestExec(exe, test_dir, "listing_0046_add_sub_cmp", "flags")) { return; }
  // if (!TestDecode(exe, test_dir, "listing_0047_challenge_flags")) { return; }
  if (!TestExec(exe, test_dir, "listing_0047_challenge_flags", "flags")) { return; }

}

bool TestExec(str exe, str path, str file, str args) {
  str fullPath = "%path%\\%file%";

  if !Exec(exe, fullPath) {
    return false;
  }
  if !CompareExec(exe, fullPath) {
    return false;
  }

  return true;
}

bool TestDecode(str exe, str path, str file) {
  str fullPath = "%path%\\%file%";

  if !Disassemble(exe, fullPath) {
    return false;
  }
  if !Assemble(exe, fullPath) {
    return false;
  }
  if !CompareAssemble(exe, fullPath) {
    return false;
  }

  return true;
}

bool Disassemble(str exe, str file) {
  if !SystemShellExecute("%exe% -decode %file% > build\\out.asm") {
    SystemShellExecute("%exe% -decode -v %file%");
    return false;
  }

  return true;
}

bool Exec(str exe, str file) {
  if !SystemShellExecute("%exe% -exec %file% > build\\out.txt") {
    SystemShellExecute("%exe% -exec -v %file%");
    return false;
  }

  return true;
}
bool CompareExec(str exe, str file) {
  if !SystemShellExecute("fc /L %file%.txt build\\out.txt") {
    return false;
  }

  return true;
}

bool Assemble(str exe, str file) {
  if !SystemShellExecute("nasm -o build\\out_asm build\\out.asm") {
    if PathExists("out.asm") {
      SystemShellExecute("type out.asm");
    } else {
      SystemShellExecute("%exe% %file% 1");
    }

    return false;
  }

  return true;
}

bool CompareAssemble(str exe, str file) {
  if !SystemShellExecute("fc /B %file% build\\out_asm") {
    str orig = FileReadAll("%file%.asm"):assert();
    str disa = FileReadAll("build\\out.asm"):assert();

    str[] orig_lines = new str[];
    str[] disa_lines = new str[];

    int length = file:len();

    for str line in StringSplitByCharacter(orig, "\n", false) {
      str trimmed = StringTrim(line);
      if StringStartsWith(trimmed, ";") { continue; }
      if trimmed:len() == 0 { continue; }

      length = length if trimmed:len() < length else trimmed:len();

      orig_lines:add(trimmed);
    }
    for str line in StringSplitByCharacter(disa, "\n", false) {
      str trimmed = StringTrim(line);
      if StringStartsWith(trimmed, ";") { continue; }
      if trimmed:len() == 0 { continue; }

      disa_lines:add(trimmed);
    }

    Log("%file%   out");

    int lines = orig_lines:len() if orig_lines:len() > disa_lines:len() else disa_lines:len();
    for int i = 0; i < lines; i += 1 {
      str left  = orig_lines[i] if i < orig_lines:len() else "---";
      str right = disa_lines[i] if i < disa_lines:len() else "---";

      str left_pad = StringRepeat(" ", length - left:len());

      str message = "%left%%left_pad%   %right%";
      str modifier = TextColorError() + TextBold() if left != right else TextWeight(100);
      if (left != right) {
	Log(modifier + message);
      }
    }

    return false;
  }

  return true;
}
